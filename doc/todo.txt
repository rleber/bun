TODO
_High Priority_
Rename todo.txt
Review and revise documentation
Rebuild Watbun archives
Test binary Huffman files: flag and decoding
Test other media codes
Look for other undecodable files
Rename roff as tf?
Performance improvement
Make bun test build and build_compress... independent of FASS and watbun archives (i.e copy source files)
Bun compare (one file from each of two lists), e.g.
    bun compare EXPRESSIONS --in FILES... --vs FILES... --where CONDITION
      e.g. --where 'file1.digest == file2.digest && file1.text != file2.text'
Release version 1.0
Major rewrite:
    All files are just Hashie::Mashes
        File.unpack(<packed file>) unpacks a packed file
        No packed file object(?) (except as needed to unpack files)
    No file descriptor object
    No Data object (except as needed to unpack files)
    Simpler translate process?
        Fewer steps (e.g. combine unpack and decode, and even possibly bake)
        With file indexes, is there really any need for a Decoded file format?
    Limited distinction (if any), between file types
        Possibly File::Decoded, File::Text, and File::Frozen
        File::Text and File::Frozen should be File::Unpacked::Text and File::Unpacked::Frozen
    No distinction between libraries and archives
        Archives don't care how they're organized
    Simpler model for file promotion, using inheritance
    Is there really any meaningful distinction between field traits and other traits?
    Collapse archive/library as much as possible
    Sensible caching, less file rereading; cache at object or class level, not globally
    Separate bun show logic into a separate class/gem, loosely coupled to File characteristics
    Separate Slicr gem
    Separate Bots gem?
bun file editor
    Checkout/checking (or in-place edit)
    Produce multiple synchronized lines
        9-bit ASCII
        8-bit ASCII
        7-bit ASCII
        hex
        octal
        decimal
        BCD
        Huffman (but how?)
    Look for edit marks (or a separate edit line)
        [...] {...} / \ dddd i
Complete tests:
    archive compare_dates
    archive pull
    archive text_status
    config *
    library classify
    archive tar
Create bun library (or archive) push
Document new process: pull, unpack, catalog, decode, find, list/describe, clean, organize, extract, push
Check out lib/clean.rb
Implement interactive (or stream) editor:
    Could you use sed, vim, Textmate as a backend?
    /pat/[bxoa]? pattern matching (e.g. b for binary, a for ascii, etc.)
    p command shows a dump in multiple formats
    Alternatively: check out the contents (in whatever format), edit, then check them back in again

_Medium Priority_
bun bake --to-original-destination
Convert BCD printer control codes
Convert line printer art (e.g. ar020.0937) to graphics
Refine topological sorting: one pass through for precedences; version with {|node1, node2| ... } block
Move topological sorting to its own gem
Other traits
    Object file
        Very few large runs
        Largely unreadable
    Try determining type by comparing preamble contents:
        Words 0..6, and 0..3 after specification; spec.last + 3 = 0333333 may mean
            binary load module
bun catalog should be able to recatalog files of all grades
Refactor match_expected_output_except_for, using a method, so we can do a series of separate tests
Fix weird spacing in Thor long descriptions with fixed spacing  
--progress option for bun show
Other output formats, e.g. xls, html
Better audit trail mechanism: Where did a file come from?
    Unpack should record where unpacked from/to
    Decode should record where decoded from/to
    Compress should record where moved from/to (where?)
    Better syntax for reverse find: i.e., where did a baked file come from?
bun dump pre-block padding repair
bun dump with or without block preambles and llink preambles
Symlink readme and todo in top directory
Review miscellaneous TODOs in the source files
Encapsulize test pattern: should create output, with this format, etc.
Refactor test with create_file, create_directory, clean
Is archive even necessary? Could we not just do e.g. bun decode archive/**, etc.?
file_type should never be :packed -- it should be :text or :frozen
Change :text file_type to :flat (and :frozen to :library ?)
Multiple readme files, accessible via readme FILE (with readme --ls)
Resolve backspaces: to underlining, overstrike or bold (explore 'col' command)
Convert troff to HTML or Markdown, or some other modern format (explore 'groff -T')
Refactor the tests into smaller sets
Remove places code
Remove config code?
Remove extraneous code
    places
    config
    sandbox
    compare_dates
    collection cp, mv, etc.
Move all system calls into Shell class
Remove shell.log code
Add long_desc to all methods
Refactor Bots to use Actors (or put methods (e.g. decode, dump) into the data objects)
Optimization ideas: Continue examining Indexable::Basic, since it's probably 10-15% of execution time
    Reduce usage, optimize "center" code
File type for different kinds of files:
    Object files
    Roff command files
    Scripts
    Print listings (Qu: are these ever frozen?)
More flexible output options:
    CSV output
    Non-justified (immediate output)
Loose hook to output printing (e.g. use rleber-table)
Gemify
    Move Slicr to a gem
    Move Bot::Base to a gem; provide tests
    Build Bun as a gem
    Revise installation readme
    Upload to Github

_Low Priority_
Allow multiple files in certain commands
Combine freezer ls with bun ls
Combine bun describe with bun ls
Combine freezer dump with bun dump
Combine archive decode and decode
Option to customize extension on unpacked or decoded files (e.g. '.txt')
Create Slicr command line tools (e.g. a filter)
Refactor Slicr based on the concept of layers, etc. 