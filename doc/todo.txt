TODO
_High Priority_
Test --mark option in bun check/analyze
Create bun field -f FIELD FILE... and bun match -f FIELD -v VALUE FILE (or bun match FORMULA FILE)
Extend bun check
    Flag whether files contain troff commands
    Printer listing (same as overstruck?)
    Object file
    Try determining type by comparing preamble contents:
        Words 0..6, and 0..3 after specification; spec.last + 3 = 0333333 may mean
        binary load module
Generalized bun check/analyze
    Combine check and analyze
    Run all tests, with --mark
Implement bun library clean
    Find duplicates
    Remove unclean files
    Possible --tag option (place a tag saying what happened to files which were removed)
Implement bun library organize
    Keep a .bun_spec.yml file in decoded archives showing how the archive is organized?
    Option to turn off inclusion of file modification date in unpacked or thawed file names
    Option to turn off resetting file modification dates for unpacked or thawed files
Create bun archive tar
Release version 1.0
Major rewrite:
    All files are just Hashie::Mashes
        File.unpack(<packed file>) unpacks a packed file
        No packed file object (except as needed to unpack files)
    No file descriptor object
    No Data object (except as needed to unpack files)
    Limited distinction (if any), between file types
        Possibly File::Decoded, File::Text, and File::Frozen
    No distinction between libraries and archives
        Archives don't care how they're organized
Alternate data storage formats: raw, binary, octal, hex
Complete tests: 
    archive catalog (check descriptor 'catalog_time' has been changed; test --remove)
    archive compare_dates
    archive pull
    archive text_status
    config *
    library compact (complete tests)
        For all files:
            collapse tape names to the oldest if the content is identical
            collapse tape name entirely if there's only one version
        For text files:
            Collapse dates to the oldest, if the content is identical
            If there's only one date, collapse the date altogether (?)
            If there's more than one date, collapse the HHMMSS unless the YYMMDD is identical
        For frozen shards:
            Above rules apply within a frozen file
            For frozen files, similar rules apply:
                Collapse dates to the oldest, if the content is identical
                If there's only one date, collapse the date altogether
                If there's more than one date, collapse the HHMMSS unless the YYMMDD is identical
    library classify
    library put
    library push
Create bun library (or archive) push
Combine archive, library
Document new process: pull, unpack, catalog, decode, find, list/describe, clean, organize, extract, push
Implement Huffman decoding

_Medium Priority_
Change bun archive put to bun archive bake, burn, wring, squeeze, extrude
Resolve backspaces: to underlining, overstrike or bold (explore 'col' command)
Convert troff to HTML or Markdown, or some other modern format (explore 'groff -T')
Refactor the tests into smaller sets
Remove places code
Remove config code?
Remove extraneous code
Remove shell.log code
Add long_desc to all methods
Refactor Bots to use Actors (or put methods (e.g. thaw, dump) into the data objects)
Optimization ideas: Continue examining Indexable::Basic, since it's probably 10-15% of execution time
    Reduce usage, optimize "center" code
File type for different kinds of files:
    Object files
    Troff command files
    Scripts
    Print listings (Qu: are these ever frozen?)
Gemify
    Move Bot::Base to a gem; provide tests
    Build as a gem
    Revise installation readme
    Upload to Github

_Low Priority_
Allow multiple files in certain commands
Combine freezer ls with bun ls
Combine bun describe with bun ls
Combine freezer dump with bun dump
Combine archive decode and decode
Option to customize extension on unpacked or thawed files (e.g. '.txt')
Refactor Slicr based on the concept of layers, etc.
