TODO
Remove extra "archive" argument to most commands
Change bun test, so you can run a subset of tests
File::Converted.open should attempt to convert an unconverted file
Annotated file structure
- Archive convert command
- Change other commands to work with converted format
- Allow input from $stdin
- Remove redundant stuff from descriptor hash
- Creator information: Bun system, version, development/production, branch, git HEAD
Filter methods
Alternate data storage formats
Complete tests: 
- archive catalog (check descriptor 'catalog_time' has been changed; test --remove)
- archive compare_dates
- archive fetch
- archive text_status
- config *
- library compact (complete tests)
- library classify
Combine archive, library
Remove places code
Remove config code?
Remove extraneous code
Universal path URL with substitutions <name>, [<shard index>]
New process: pull, annotate, merge (with catalog), decode, find, list/describe, clean, reorganize, extract, push
Add archived to descriptor
Add folders (directories plus frozen) and fragments (leaves, but with shards), items (leaves + shards) to collection methods
Test bun library compact
- For all files:
  - collapse tape names to the oldest if the content is identical
  - collapse tape name entirely if there's only one version
- For text files:
  - Collapse dates to the oldest, if the content is identical
  - If there's only one date, collapse the date altogether (?)
  - If there's more than one date, collapse the HHMMSS unless the YYMMDD is identical
- For frozen shards:
  - Above rules apply within a frozen file
  - For frozen files, similar rules apply:
    - Collapse dates to the oldest, if the content is identical
    - If there's only one date, collapse the date altogether
    - If there's more than one date, collapse the HHMMSS unless the YYMMDD is identical
Change bun library classify to bun library clean
Create bun find command (similar to find shell command)
  --print
  --exec
  --command (--command 'foo xxx' => bun foo xxx)
  --type x
  --clean
  --dirty
Remove shell.log code
Move all test cases' input files to data/test directory
Make tests directory-independent (e.g. on listings)
Separate file.open from file.load/read
Refactor other commands into the appropriate classes
Set atime only when we actually read a file (not just the preamble)
Integrate bun archive text_status into bun ls
Change shard 0 to mean the first shard; use shard '\\0', (or shard "0") for a shard named '0'
Allow globs in file patterns
Refactor Bots to use Actors (or put methods (e.g. thaw, dump) into the data objects)
Stream-oriented versions of thaw, etc.
Ability to 'bun archive ls' by archive name patterns
Ability to search xref'ed files, for example find files with multiple copies
Add --select option to bun ls
Add --select option to bun extract
Why doesn't words[0].octal work?
Ignore files not in the index
Make set_timestamp automatic
Move archive fetch logic to Archive object
Keep a .spec file in decoded archives showing how the archive is organized?
Flatten out code: freezer thaw => thaw (or even combine with unpack)
Option to turn off inclusion of file modification date in unpacked or thawed file names
Option to turn off resetting file modification dates for unpacked or thawed files
Option to customize extension on unpacked or thawed files (e.g. '.txt')
Option to create archives organized like file/v1/file1, file/v2/file2, etc.
Implement Huffman decoding
Standardize Decode and Defrost interfaces: decode, instead of unpack/thaw
Remove extraneous output files
Resolve backspaces: to underlining, overstrike or bold (explore 'col' command)
Flag whether files contain backspaces/overstrikes, or tabs
Convert troff to HTML or Markdown, or some other modern format (explore 'groff -T')
Flag whether files contain troff commands
File type for print listings (Qu: are these ever frozen?)
Try determining type by comparing preamble contents: Words 0..6, and 0..3 after specification; spec.last + 3 = 0333333 may mean binary load module
Optimization ideas: Continue examining Indexable::Basic, since it's probably 10-15% of execution time: Reduce usage, optimize "center" code
Refactor Slicr based on the concept of layers, etc.
Clean code
Move Bot::Base to a gem; provide tests
Build as a gem
Revise installation readme
Upload to Github
Why does bun ls take so long?
Rename Bot modules, e.g. Archive bot is in "archive_bot.rb" and directory "archive_bot"
Why the distinction between repositories and archives? Why not just use URLs, and let the tell the difference, and
have an "archive copy" command to copy from one to the other?
Create stream-based versions of the major conversion commands (e.g. thaw, unpack). This would allow the use of binary
editors, etc. to try to recover files that are corrupted.
