
GECOS::Decoder
*** slices.size = 7744
*** ch = LazyArray:#<LazyArray:0x104667b00 @value_block=#<Proc:0x00000001016bfc68@/Users/richard/projects/gecos/lib/slicr/words.rb:53>, @values=[], @size=7744>
*** zstring(44): ch.size=7744
*** zstring(44): loop ch[44]="/"
*** zstring(44): loop ch[45]="1"
*** zstring(44): loop ch[46]="9"
*** zstring(44): loop ch[47]="8"
*** zstring(44): loop ch[48]="6"
*** zstring(44): loop ch[49]="/"
*** zstring(44): loop ch[50]="s"
*** zstring(44): loop ch[51]="k"
*** zstring(44): loop ch[52]="i"
*** zstring(44): loop ch[53]="t"
*** zstring(44): loop ch[54]="."
*** zstring(44): loop ch[55]="t"
*** zstring(44): loop ch[56]="\000"
*** zstring(44): offset=56
*** zstring(44) => #<LazyArray:0x104658128 @value_block=nil, @values=[["/", true], ["1", true], ["9", true], ["8", true], ["6", true], ["/", true], ["s", true], ["k", true], ["i", true], ["t", true], [".", true], ["t", true]], @size=12>
  decodes a sample file

Indexable::Basic
  should allow indexing
  should retrieve single indexes
    should return nil out of range
      should return nil for self[5]
      should return nil for self[-6]
    with positive values
      should retrieve self[0]
      should retrieve self[1]
      should retrieve self[2]
      should retrieve self[3]
      should retrieve self[4]
    with negative single values
      should retrieve self[-5]
      should retrieve self[-4]
      should retrieve self[-3]
      should retrieve self[-2]
      should retrieve self[-1]
  should retrieve index ranges
    with inclusive ranges
      with positive..positive
        should retrieve self[0..0]
        should retrieve self[0..1]
        should retrieve self[0..2]
        should retrieve self[0..3]
        should retrieve self[0..4]
        should retrieve self[0..5]
        should retrieve self[0..6]
        should retrieve self[1..0]
        should retrieve self[1..1]
        should retrieve self[1..2]
        should retrieve self[1..3]
        should retrieve self[1..4]
        should retrieve self[1..5]
        should retrieve self[1..6]
        should retrieve self[2..0]
        should retrieve self[2..1]
        should retrieve self[2..2]
        should retrieve self[2..3]
        should retrieve self[2..4]
        should retrieve self[2..5]
        should retrieve self[2..6]
        should retrieve self[3..0]
        should retrieve self[3..1]
        should retrieve self[3..2]
        should retrieve self[3..3]
        should retrieve self[3..4]
        should retrieve self[3..5]
        should retrieve self[3..6]
        should retrieve self[4..0]
        should retrieve self[4..1]
        should retrieve self[4..2]
        should retrieve self[4..3]
        should retrieve self[4..4]
        should retrieve self[4..5]
        should retrieve self[4..6]
        should retrieve self[5..0]
        should retrieve self[5..1]
        should retrieve self[5..2]
        should retrieve self[5..3]
        should retrieve self[5..4]
        should retrieve self[5..5]
        should retrieve self[5..6]
        should retrieve self[6..0]
        should retrieve self[6..1]
        should retrieve self[6..2]
        should retrieve self[6..3]
        should retrieve self[6..4]
        should retrieve self[6..5]
        should retrieve self[6..6]
      with positive..negative
        should retrieve self[0..-6]
        should retrieve self[0..-5]
        should retrieve self[0..-4]
        should retrieve self[0..-3]
        should retrieve self[0..-2]
        should retrieve self[0..-1]
        should retrieve self[1..-6]
        should retrieve self[1..-5]
        should retrieve self[1..-4]
        should retrieve self[1..-3]
        should retrieve self[1..-2]
        should retrieve self[1..-1]
        should retrieve self[2..-6]
        should retrieve self[2..-5]
        should retrieve self[2..-4]
        should retrieve self[2..-3]
        should retrieve self[2..-2]
        should retrieve self[2..-1]
        should retrieve self[3..-6]
        should retrieve self[3..-5]
        should retrieve self[3..-4]
        should retrieve self[3..-3]
        should retrieve self[3..-2]
        should retrieve self[3..-1]
        should retrieve self[4..-6]
        should retrieve self[4..-5]
        should retrieve self[4..-4]
        should retrieve self[4..-3]
        should retrieve self[4..-2]
        should retrieve self[4..-1]
        should retrieve self[5..-6]
        should retrieve self[5..-5]
        should retrieve self[5..-4]
        should retrieve self[5..-3]
        should retrieve self[5..-2]
        should retrieve self[5..-1]
        should retrieve self[6..-6]
        should retrieve self[6..-5]
        should retrieve self[6..-4]
        should retrieve self[6..-3]
        should retrieve self[6..-2]
        should retrieve self[6..-1]
      with negative..positive
        should retrieve self[-6..0]
        should retrieve self[-6..1]
        should retrieve self[-6..2]
        should retrieve self[-6..3]
        should retrieve self[-6..4]
        should retrieve self[-6..5]
        should retrieve self[-6..6]
        should retrieve self[-5..0]
        should retrieve self[-5..1]
        should retrieve self[-5..2]
        should retrieve self[-5..3]
        should retrieve self[-5..4]
        should retrieve self[-5..5]
        should retrieve self[-5..6]
        should retrieve self[-4..0]
        should retrieve self[-4..1]
        should retrieve self[-4..2]
        should retrieve self[-4..3]
        should retrieve self[-4..4]
        should retrieve self[-4..5]
        should retrieve self[-4..6]
        should retrieve self[-3..0]
        should retrieve self[-3..1]
        should retrieve self[-3..2]
        should retrieve self[-3..3]
        should retrieve self[-3..4]
        should retrieve self[-3..5]
        should retrieve self[-3..6]
        should retrieve self[-2..0]
        should retrieve self[-2..1]
        should retrieve self[-2..2]
        should retrieve self[-2..3]
        should retrieve self[-2..4]
        should retrieve self[-2..5]
        should retrieve self[-2..6]
        should retrieve self[-1..0]
        should retrieve self[-1..1]
        should retrieve self[-1..2]
        should retrieve self[-1..3]
        should retrieve self[-1..4]
        should retrieve self[-1..5]
        should retrieve self[-1..6]
      with negative..negative
        should retrieve self[-6..-6]
        should retrieve self[-6..-5]
        should retrieve self[-6..-4]
        should retrieve self[-6..-3]
        should retrieve self[-6..-2]
        should retrieve self[-6..-1]
        should retrieve self[-5..-6]
        should retrieve self[-5..-5]
        should retrieve self[-5..-4]
        should retrieve self[-5..-3]
        should retrieve self[-5..-2]
        should retrieve self[-5..-1]
        should retrieve self[-4..-6]
        should retrieve self[-4..-5]
        should retrieve self[-4..-4]
        should retrieve self[-4..-3]
        should retrieve self[-4..-2]
        should retrieve self[-4..-1]
        should retrieve self[-3..-6]
        should retrieve self[-3..-5]
        should retrieve self[-3..-4]
        should retrieve self[-3..-3]
        should retrieve self[-3..-2]
        should retrieve self[-3..-1]
        should retrieve self[-2..-6]
        should retrieve self[-2..-5]
        should retrieve self[-2..-4]
        should retrieve self[-2..-3]
        should retrieve self[-2..-2]
        should retrieve self[-2..-1]
        should retrieve self[-1..-6]
        should retrieve self[-1..-5]
        should retrieve self[-1..-4]
        should retrieve self[-1..-3]
        should retrieve self[-1..-2]
        should retrieve self[-1..-1]
    with exclusive ranges
      with positive...positive
        should retrieve self[0...0]
        should retrieve self[0...1]
        should retrieve self[0...2]
        should retrieve self[0...3]
        should retrieve self[0...4]
        should retrieve self[0...5]
        should retrieve self[0...6]
        should retrieve self[1...0]
        should retrieve self[1...1]
        should retrieve self[1...2]
        should retrieve self[1...3]
        should retrieve self[1...4]
        should retrieve self[1...5]
        should retrieve self[1...6]
        should retrieve self[2...0]
        should retrieve self[2...1]
        should retrieve self[2...2]
        should retrieve self[2...3]
        should retrieve self[2...4]
        should retrieve self[2...5]
        should retrieve self[2...6]
        should retrieve self[3...0]
        should retrieve self[3...1]
        should retrieve self[3...2]
        should retrieve self[3...3]
        should retrieve self[3...4]
        should retrieve self[3...5]
        should retrieve self[3...6]
        should retrieve self[4...0]
        should retrieve self[4...1]
        should retrieve self[4...2]
        should retrieve self[4...3]
        should retrieve self[4...4]
        should retrieve self[4...5]
        should retrieve self[4...6]
        should retrieve self[5...0]
        should retrieve self[5...1]
        should retrieve self[5...2]
        should retrieve self[5...3]
        should retrieve self[5...4]
        should retrieve self[5...5]
        should retrieve self[5...6]
        should retrieve self[6...0]
        should retrieve self[6...1]
        should retrieve self[6...2]
        should retrieve self[6...3]
        should retrieve self[6...4]
        should retrieve self[6...5]
        should retrieve self[6...6]
      with positive...negative
        should retrieve self[0...-6]
        should retrieve self[0...-5]
        should retrieve self[0...-4]
        should retrieve self[0...-3]
        should retrieve self[0...-2]
        should retrieve self[0...-1]
        should retrieve self[1...-6]
        should retrieve self[1...-5]
        should retrieve self[1...-4]
        should retrieve self[1...-3]
        should retrieve self[1...-2]
        should retrieve self[1...-1]
        should retrieve self[2...-6]
        should retrieve self[2...-5]
        should retrieve self[2...-4]
        should retrieve self[2...-3]
        should retrieve self[2...-2]
        should retrieve self[2...-1]
        should retrieve self[3...-6]
        should retrieve self[3...-5]
        should retrieve self[3...-4]
        should retrieve self[3...-3]
        should retrieve self[3...-2]
        should retrieve self[3...-1]
        should retrieve self[4...-6]
        should retrieve self[4...-5]
        should retrieve self[4...-4]
        should retrieve self[4...-3]
        should retrieve self[4...-2]
        should retrieve self[4...-1]
        should retrieve self[5...-6]
        should retrieve self[5...-5]
        should retrieve self[5...-4]
        should retrieve self[5...-3]
        should retrieve self[5...-2]
        should retrieve self[5...-1]
        should retrieve self[6...-6]
        should retrieve self[6...-5]
        should retrieve self[6...-4]
        should retrieve self[6...-3]
        should retrieve self[6...-2]
        should retrieve self[6...-1]
      with negative...positive
        should retrieve self[-6...0]
        should retrieve self[-6...1]
        should retrieve self[-6...2]
        should retrieve self[-6...3]
        should retrieve self[-6...4]
        should retrieve self[-6...5]
        should retrieve self[-6...6]
        should retrieve self[-5...0]
        should retrieve self[-5...1]
        should retrieve self[-5...2]
        should retrieve self[-5...3]
        should retrieve self[-5...4]
        should retrieve self[-5...5]
        should retrieve self[-5...6]
        should retrieve self[-4...0]
        should retrieve self[-4...1]
        should retrieve self[-4...2]
        should retrieve self[-4...3]
        should retrieve self[-4...4]
        should retrieve self[-4...5]
        should retrieve self[-4...6]
        should retrieve self[-3...0]
        should retrieve self[-3...1]
        should retrieve self[-3...2]
        should retrieve self[-3...3]
        should retrieve self[-3...4]
        should retrieve self[-3...5]
        should retrieve self[-3...6]
        should retrieve self[-2...0]
        should retrieve self[-2...1]
        should retrieve self[-2...2]
        should retrieve self[-2...3]
        should retrieve self[-2...4]
        should retrieve self[-2...5]
        should retrieve self[-2...6]
        should retrieve self[-1...0]
        should retrieve self[-1...1]
        should retrieve self[-1...2]
        should retrieve self[-1...3]
        should retrieve self[-1...4]
        should retrieve self[-1...5]
        should retrieve self[-1...6]
      with negative...negative
        should retrieve self[-6...-6]
        should retrieve self[-6...-5]
        should retrieve self[-6...-4]
        should retrieve self[-6...-3]
        should retrieve self[-6...-2]
        should retrieve self[-6...-1]
        should retrieve self[-5...-6]
        should retrieve self[-5...-5]
        should retrieve self[-5...-4]
        should retrieve self[-5...-3]
        should retrieve self[-5...-2]
        should retrieve self[-5...-1]
        should retrieve self[-4...-6]
        should retrieve self[-4...-5]
        should retrieve self[-4...-4]
        should retrieve self[-4...-3]
        should retrieve self[-4...-2]
        should retrieve self[-4...-1]
        should retrieve self[-3...-6]
        should retrieve self[-3...-5]
        should retrieve self[-3...-4]
        should retrieve self[-3...-3]
        should retrieve self[-3...-2]
        should retrieve self[-3...-1]
        should retrieve self[-2...-6]
        should retrieve self[-2...-5]
        should retrieve self[-2...-4]
        should retrieve self[-2...-3]
        should retrieve self[-2...-2]
        should retrieve self[-2...-1]
        should retrieve self[-1...-6]
        should retrieve self[-1...-5]
        should retrieve self[-1...-4]
        should retrieve self[-1...-3]
        should retrieve self[-1...-2]
        should retrieve self[-1...-1]
  with start,length pairs
    with positive start index
      should retrieve self[0,-1]
      should retrieve self[0,0]
      should retrieve self[0,1]
      should retrieve self[0,2]
      should retrieve self[0,3]
      should retrieve self[0,4]
      should retrieve self[0,5]
      should retrieve self[0,6]
      should retrieve self[1,-1]
      should retrieve self[1,0]
      should retrieve self[1,1]
      should retrieve self[1,2]
      should retrieve self[1,3]
      should retrieve self[1,4]
      should retrieve self[1,5]
      should retrieve self[1,6]
      should retrieve self[2,-1]
      should retrieve self[2,0]
      should retrieve self[2,1]
      should retrieve self[2,2]
      should retrieve self[2,3]
      should retrieve self[2,4]
      should retrieve self[2,5]
      should retrieve self[2,6]
      should retrieve self[3,-1]
      should retrieve self[3,0]
      should retrieve self[3,1]
      should retrieve self[3,2]
      should retrieve self[3,3]
      should retrieve self[3,4]
      should retrieve self[3,5]
      should retrieve self[3,6]
      should retrieve self[4,-1]
      should retrieve self[4,0]
      should retrieve self[4,1]
      should retrieve self[4,2]
      should retrieve self[4,3]
      should retrieve self[4,4]
      should retrieve self[4,5]
      should retrieve self[4,6]
      should retrieve self[5,-1]
      should retrieve self[5,0]
      should retrieve self[5,1]
      should retrieve self[5,2]
      should retrieve self[5,3]
      should retrieve self[5,4]
      should retrieve self[5,5]
      should retrieve self[5,6]
      should retrieve self[6,-1]
      should retrieve self[6,0]
      should retrieve self[6,1]
      should retrieve self[6,2]
      should retrieve self[6,3]
      should retrieve self[6,4]
      should retrieve self[6,5]
      should retrieve self[6,6]
    with negative start index
      should retrieve self[-6,-1]
      should retrieve self[-6,0]
      should retrieve self[-6,1]
      should retrieve self[-6,2]
      should retrieve self[-6,3]
      should retrieve self[-6,4]
      should retrieve self[-6,5]
      should retrieve self[-6,6]
      should retrieve self[-5,-1]
      should retrieve self[-5,0]
      should retrieve self[-5,1]
      should retrieve self[-5,2]
      should retrieve self[-5,3]
      should retrieve self[-5,4]
      should retrieve self[-5,5]
      should retrieve self[-5,6]
      should retrieve self[-4,-1]
      should retrieve self[-4,0]
      should retrieve self[-4,1]
      should retrieve self[-4,2]
      should retrieve self[-4,3]
      should retrieve self[-4,4]
      should retrieve self[-4,5]
      should retrieve self[-4,6]
      should retrieve self[-3,-1]
      should retrieve self[-3,0]
      should retrieve self[-3,1]
      should retrieve self[-3,2]
      should retrieve self[-3,3]
      should retrieve self[-3,4]
      should retrieve self[-3,5]
      should retrieve self[-3,6]
      should retrieve self[-2,-1]
      should retrieve self[-2,0]
      should retrieve self[-2,1]
      should retrieve self[-2,2]
      should retrieve self[-2,3]
      should retrieve self[-2,4]
      should retrieve self[-2,5]
      should retrieve self[-2,6]
      should retrieve self[-1,-1]
      should retrieve self[-1,0]
      should retrieve self[-1,1]
      should retrieve self[-1,2]
      should retrieve self[-1,3]
      should retrieve self[-1,4]
      should retrieve self[-1,5]
      should retrieve self[-1,6]

LazyArray
  []
    works for index 0
    works for index 1
    works for index 2
    works for index 3
    works for index 4
    works for index 5
    works for index 6
    works for index 7
    works for index 8
    works for index 9
    detects end of the array
  <<
    works
    resets size
  size
    should work
  size=
    should work
    should reset size
  []=
    should work
    should not shorten size
    should extend size
  +
    should add values
    should retain original values
    should return a LazyArray
  +=
    should add values
  first
    should work
  last
    should work
  retrieval
    should only happen once
  to_a
    should work
  ==
    should compare to other arrays

Slicr::Word
  should define String#pluralize

word
  behaves like a segment
    should define correct width
    should define ones_mask
    should define slices
    for bit number 0
      should define single_bit mask
    for bit number 1
      should define single_bit mask
    for bit number 2
      should define single_bit mask
    for bit number 3
      should define single_bit mask
    for bit number 4
      should define single_bit mask
    for bit number 5
      should define single_bit mask
    for bit number 6
      should define single_bit mask
    for bit number 7
      should define single_bit mask
    for bit number 8
      should define single_bit mask
    for bit number 9
      should define single_bit mask
    for bit number 10
      should define single_bit mask
    for bit number 11
      should define single_bit mask
    for bit number 12
      should define single_bit mask
    for bit number 13
      should define single_bit mask
    for bit number 14
      should define single_bit mask
    for bit number 15
      should define single_bit mask
    for bit number 16
      should define single_bit mask
    for bit number 17
      should define single_bit mask
    for bit number 18
      should define single_bit mask
    for bit number 19
      should define single_bit mask
    for bit number 20
      should define single_bit mask
    for bit number 21
      should define single_bit mask
    for bit number 22
      should define single_bit mask
    for bit number 23
      should define single_bit mask
    for bit number 24
      should define single_bit mask
    for bit number 25
      should define single_bit mask
    for bit number 26
      should define single_bit mask
    for bit number 27
      should define single_bit mask
    for bit number 28
      should define single_bit mask
    for bit number 29
      should define single_bit mask
    for bit number 30
      should define single_bit mask
    for bit number 31
      should define single_bit mask
    for bit number 32
      should define single_bit mask
    for bit number 33
      should define single_bit mask
    for bit number 34
      should define single_bit mask
    for bit number 35
      should define single_bit mask
    for bit number 36
      should define single_bit mask
    for bit number 37
      should define single_bit mask
    slices
      should be a Hash
      should contain Slice::Definitions
  behaves like it is sliced
    half_word
      should define <parent>.half_word
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      HalfWord class
        exists
        defines .formats
        defines .string?
    byte
      should define <parent>.byte
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      Byte class
        exists
        defines .formats
        defines .string?
    character
      should define <parent>.character
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      Character class
        exists
        defines .formats
        defines .string?
    packed_character
      should define <parent>.packed_character
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      PackedCharacter class
        exists
        defines .formats
        defines .string?
    bit
      should define <parent>.bit
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      Bit class
        exists
        defines .formats
        defines .string?
    integer
      should define <parent>.integer
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      Integer class
        exists
        defines .formats
        defines .string?

instance
  automatically installs formats
    understands formats
  behaves like a segment
    should define correct width
    should define slices
    for bit number 0
      should define single_bit mask
      should define ones_mask
    for bit number 1
      should define single_bit mask
      should define ones_mask
    for bit number 2
      should define single_bit mask
      should define ones_mask
    for bit number 3
      should define single_bit mask
      should define ones_mask
    for bit number 4
      should define single_bit mask
      should define ones_mask
    for bit number 5
      should define single_bit mask
      should define ones_mask
    for bit number 6
      should define single_bit mask
      should define ones_mask
    for bit number 7
      should define single_bit mask
      should define ones_mask
    for bit number 8
      should define single_bit mask
      should define ones_mask
    for bit number 9
      should define single_bit mask
      should define ones_mask
    for bit number 10
      should define single_bit mask
      should define ones_mask
    for bit number 11
      should define single_bit mask
      should define ones_mask
    for bit number 12
      should define single_bit mask
      should define ones_mask
    for bit number 13
      should define single_bit mask
      should define ones_mask
    for bit number 14
      should define single_bit mask
      should define ones_mask
    for bit number 15
      should define single_bit mask
      should define ones_mask
    for bit number 16
      should define single_bit mask
      should define ones_mask
    for bit number 17
      should define single_bit mask
      should define ones_mask
    for bit number 18
      should define single_bit mask
      should define ones_mask
    for bit number 19
      should define single_bit mask
      should define ones_mask
    for bit number 20
      should define single_bit mask
      should define ones_mask
    for bit number 21
      should define single_bit mask
      should define ones_mask
    for bit number 22
      should define single_bit mask
      should define ones_mask
    for bit number 23
      should define single_bit mask
      should define ones_mask
    for bit number 24
      should define single_bit mask
      should define ones_mask
    for bit number 25
      should define single_bit mask
      should define ones_mask
    for bit number 26
      should define single_bit mask
      should define ones_mask
    for bit number 27
      should define single_bit mask
      should define ones_mask
    for bit number 28
      should define single_bit mask
      should define ones_mask
    for bit number 29
      should define single_bit mask
      should define ones_mask
    for bit number 30
      should define single_bit mask
      should define ones_mask
    for bit number 31
      should define single_bit mask
      should define ones_mask
    for bit number 32
      should define single_bit mask
      should define ones_mask
    for bit number 33
      should define single_bit mask
      should define ones_mask
    for bit number 34
      should define single_bit mask
      should define ones_mask
    for bit number 35
      should define single_bit mask
      should define ones_mask
    for bit number 36
      should define single_bit mask
      should define ones_mask
    for bit number 37
      should define single_bit mask
      should define ones_mask
    slices
      should be a Hash
      should contain Slice::Definitions
  behaves like it is sliced
    half_word
      should define <parent>.half_word
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      HalfWord class
        exists
        defines .formats
        defines .string?
    byte
      should define <parent>.byte
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      Byte class
        exists
        defines .formats
        defines .string?
    character
      should define <parent>.character
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      Character class
        exists
        defines .formats
        defines .string?
    packed_character
      should define <parent>.packed_character
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      PackedCharacter class
        exists
        defines .formats
        defines .string?
    bit
      should define <parent>.bit
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      Bit class
        exists
        defines .formats
        defines .string?
    integer
      should define <parent>.integer
      sets .count
      sets .width
      sets .significant_bits
      sets .string?
      sets .sign?
      sets .mask
      Integer class
        exists
        defines .formats
        defines .string?
  half_word
    should allow access to all the slices by .half_words
    behaves like slicr is indexed
      should allow indexing
      should return nil for self[-(size+1)]
      should return nil for self[size]
      should retrieve self[0]
      should retrieve self[1]
      should retrieve self[-2]
      should retrieve self[-1]
      should retrieve self[2..2]
      should retrieve self[2..1]
      should retrieve self[2..1]
      should retrieve self[2..3]
      should retrieve self[1..2]
      should retrieve self[1..1]
      should retrieve self[1..1]
      should retrieve self[1..3]
      should retrieve self[1..2]
      should retrieve self[1..1]
      should retrieve self[1..1]
      should retrieve self[1..3]
      should retrieve self[3..2]
      should retrieve self[3..1]
      should retrieve self[3..1]
      should retrieve self[3..3]
      should retrieve self[2...2]
      should retrieve self[2...1]
      should retrieve self[2...1]
      should retrieve self[2...3]
      should retrieve self[1...2]
      should retrieve self[1...1]
      should retrieve self[1...1]
      should retrieve self[1...3]
      should retrieve self[1...2]
      should retrieve self[1...1]
      should retrieve self[1...1]
      should retrieve self[1...3]
      should retrieve self[3...2]
      should retrieve self[3...1]
      should retrieve self[3...1]
      should retrieve self[3...3]
      should retrieve self[2..-3]
      should retrieve self[2..-1]
      should retrieve self[1..-3]
      should retrieve self[1..-1]
      should retrieve self[1..-3]
      should retrieve self[1..-1]
      should retrieve self[3..-3]
      should retrieve self[3..-1]
      should retrieve self[2...-3]
      should retrieve self[2...-1]
      should retrieve self[1...-3]
      should retrieve self[1...-1]
      should retrieve self[1...-3]
      should retrieve self[1...-1]
      should retrieve self[3...-3]
      should retrieve self[3...-1]
      should retrieve self[-3..2]
      should retrieve self[-3..1]
      should retrieve self[-3..1]
      should retrieve self[-3..3]
      should retrieve self[-1..2]
      should retrieve self[-1..1]
      should retrieve self[-1..1]
      should retrieve self[-1..3]
      should retrieve self[-3...2]
      should retrieve self[-3...1]
      should retrieve self[-3...1]
      should retrieve self[-3...3]
      should retrieve self[-1...2]
      should retrieve self[-1...1]
      should retrieve self[-1...1]
      should retrieve self[-1...3]
      should retrieve self[-3..-3]
      should retrieve self[-3..-1]
      should retrieve self[-1..-3]
      should retrieve self[-1..-1]
      should retrieve self[-3...-3]
      should retrieve self[-3...-1]
      should retrieve self[-1...-3]
      should retrieve self[-1...-1]
      should retrieve self[2,-1]
      should retrieve self[2,1]
      should retrieve self[2,3]
      should retrieve self[1,-1]
      should retrieve self[1,1]
      should retrieve self[1,3]
      should retrieve self[1,-1]
      should retrieve self[1,1]
      should retrieve self[1,3]
      should retrieve self[3,-1]
      should retrieve self[3,1]
      should retrieve self[3,3]
      should retrieve self[-3,-1]
      should retrieve self[-3,1]
      should retrieve self[-3,3]
      should retrieve self[-1,-1]
      should retrieve self[-1,1]
      should retrieve self[-1,3]
    half_word[0]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    half_word[1]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    .half_words
      should be an Array
      should contain the expected number of elements
      should contain instances of the proper slice class (HalfWord)
  byte
    should allow access to all the slices by .bytes
    behaves like slicr is indexed
      should allow indexing
      should return nil for self[-(size+1)]
      should return nil for self[size]
      should retrieve self[0]
      should retrieve self[1]
      should retrieve self[2]
      should retrieve self[3]
      should retrieve self[-4]
      should retrieve self[-3]
      should retrieve self[-2]
      should retrieve self[-1]
      should retrieve self[2..2]
      should retrieve self[2..2]
      should retrieve self[2..3]
      should retrieve self[2..5]
      should retrieve self[2..2]
      should retrieve self[2..2]
      should retrieve self[2..3]
      should retrieve self[2..5]
      should retrieve self[3..2]
      should retrieve self[3..2]
      should retrieve self[3..3]
      should retrieve self[3..5]
      should retrieve self[5..2]
      should retrieve self[5..2]
      should retrieve self[5..3]
      should retrieve self[5..5]
      should retrieve self[2...2]
      should retrieve self[2...2]
      should retrieve self[2...3]
      should retrieve self[2...5]
      should retrieve self[2...2]
      should retrieve self[2...2]
      should retrieve self[2...3]
      should retrieve self[2...5]
      should retrieve self[3...2]
      should retrieve self[3...2]
      should retrieve self[3...3]
      should retrieve self[3...5]
      should retrieve self[5...2]
      should retrieve self[5...2]
      should retrieve self[5...3]
      should retrieve self[5...5]
      should retrieve self[2..-5]
      should retrieve self[2..-2]
      should retrieve self[2..-5]
      should retrieve self[2..-2]
      should retrieve self[3..-5]
      should retrieve self[3..-2]
      should retrieve self[5..-5]
      should retrieve self[5..-2]
      should retrieve self[2...-5]
      should retrieve self[2...-2]
      should retrieve self[2...-5]
      should retrieve self[2...-2]
      should retrieve self[3...-5]
      should retrieve self[3...-2]
      should retrieve self[5...-5]
      should retrieve self[5...-2]
      should retrieve self[-5..2]
      should retrieve self[-5..2]
      should retrieve self[-5..3]
      should retrieve self[-5..5]
      should retrieve self[-2..2]
      should retrieve self[-2..2]
      should retrieve self[-2..3]
      should retrieve self[-2..5]
      should retrieve self[-5...2]
      should retrieve self[-5...2]
      should retrieve self[-5...3]
      should retrieve self[-5...5]
      should retrieve self[-2...2]
      should retrieve self[-2...2]
      should retrieve self[-2...3]
      should retrieve self[-2...5]
      should retrieve self[-5..-5]
      should retrieve self[-5..-2]
      should retrieve self[-2..-5]
      should retrieve self[-2..-2]
      should retrieve self[-5...-5]
      should retrieve self[-5...-2]
      should retrieve self[-2...-5]
      should retrieve self[-2...-2]
      should retrieve self[2,-1]
      should retrieve self[2,2]
      should retrieve self[2,5]
      should retrieve self[2,-1]
      should retrieve self[2,2]
      should retrieve self[2,5]
      should retrieve self[3,-1]
      should retrieve self[3,2]
      should retrieve self[3,5]
      should retrieve self[5,-1]
      should retrieve self[5,2]
      should retrieve self[5,5]
      should retrieve self[-5,-1]
      should retrieve self[-5,2]
      should retrieve self[-5,5]
      should retrieve self[-2,-1]
      should retrieve self[-2,2]
      should retrieve self[-2,5]
    byte[0]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    byte[1]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    byte[2]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    byte[3]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    .bytes
      should be an Array
      should contain the expected number of elements
      should contain instances of the proper slice class (Byte)
  character
    should allow access to all the slices by .characters
    behaves like slicr is indexed
      should allow indexing
      should return nil for self[-(size+1)]
      should return nil for self[size]
      should retrieve self[0]
      should retrieve self[1]
      should retrieve self[2]
      should retrieve self[3]
      should retrieve self[-4]
      should retrieve self[-3]
      should retrieve self[-2]
      should retrieve self[-1]
      should retrieve self[2..2]
      should retrieve self[2..2]
      should retrieve self[2..3]
      should retrieve self[2..5]
      should retrieve self[2..2]
      should retrieve self[2..2]
      should retrieve self[2..3]
      should retrieve self[2..5]
      should retrieve self[3..2]
      should retrieve self[3..2]
      should retrieve self[3..3]
      should retrieve self[3..5]
      should retrieve self[5..2]
      should retrieve self[5..2]
      should retrieve self[5..3]
      should retrieve self[5..5]
      should retrieve self[2...2]
      should retrieve self[2...2]
      should retrieve self[2...3]
      should retrieve self[2...5]
      should retrieve self[2...2]
      should retrieve self[2...2]
      should retrieve self[2...3]
      should retrieve self[2...5]
      should retrieve self[3...2]
      should retrieve self[3...2]
      should retrieve self[3...3]
      should retrieve self[3...5]
      should retrieve self[5...2]
      should retrieve self[5...2]
      should retrieve self[5...3]
      should retrieve self[5...5]
      should retrieve self[2..-5]
      should retrieve self[2..-2]
      should retrieve self[2..-5]
      should retrieve self[2..-2]
      should retrieve self[3..-5]
      should retrieve self[3..-2]
      should retrieve self[5..-5]
      should retrieve self[5..-2]
      should retrieve self[2...-5]
      should retrieve self[2...-2]
      should retrieve self[2...-5]
      should retrieve self[2...-2]
      should retrieve self[3...-5]
      should retrieve self[3...-2]
      should retrieve self[5...-5]
      should retrieve self[5...-2]
      should retrieve self[-5..2]
      should retrieve self[-5..2]
      should retrieve self[-5..3]
      should retrieve self[-5..5]
      should retrieve self[-2..2]
      should retrieve self[-2..2]
      should retrieve self[-2..3]
      should retrieve self[-2..5]
      should retrieve self[-5...2]
      should retrieve self[-5...2]
      should retrieve self[-5...3]
      should retrieve self[-5...5]
      should retrieve self[-2...2]
      should retrieve self[-2...2]
      should retrieve self[-2...3]
      should retrieve self[-2...5]
      should retrieve self[-5..-5]
      should retrieve self[-5..-2]
      should retrieve self[-2..-5]
      should retrieve self[-2..-2]
      should retrieve self[-5...-5]
      should retrieve self[-5...-2]
      should retrieve self[-2...-5]
      should retrieve self[-2...-2]
      should retrieve self[2,-1]
      should retrieve self[2,2]
      should retrieve self[2,5]
      should retrieve self[2,-1]
      should retrieve self[2,2]
      should retrieve self[2,5]
      should retrieve self[3,-1]
      should retrieve self[3,2]
      should retrieve self[3,5]
      should retrieve self[5,-1]
      should retrieve self[5,2]
      should retrieve self[5,5]
      should retrieve self[-5,-1]
      should retrieve self[-5,2]
      should retrieve self[-5,5]
      should retrieve self[-2,-1]
      should retrieve self[-2,2]
      should retrieve self[-2,5]
    character[0]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    character[1]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    character[2]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    character[3]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    .characters
      should be an Array
      should contain the expected number of elements
      should contain instances of the proper slice class (Character)
  packed_character
    should allow access to all the slices by .packed_characters
    behaves like slicr is indexed
      should allow indexing
      should return nil for self[-(size+1)]
      should return nil for self[size]
      should retrieve self[0]
      should retrieve self[1]
      should retrieve self[2]
      should retrieve self[3]
      should retrieve self[4]
      should retrieve self[-5]
      should retrieve self[-4]
      should retrieve self[-3]
      should retrieve self[-2]
      should retrieve self[-1]
      should retrieve self[2..2]
      should retrieve self[2..2]
      should retrieve self[2..4]
      should retrieve self[2..6]
      should retrieve self[2..2]
      should retrieve self[2..2]
      should retrieve self[2..4]
      should retrieve self[2..6]
      should retrieve self[4..2]
      should retrieve self[4..2]
      should retrieve self[4..4]
      should retrieve self[4..6]
      should retrieve self[6..2]
      should retrieve self[6..2]
      should retrieve self[6..4]
      should retrieve self[6..6]
      should retrieve self[2...2]
      should retrieve self[2...2]
      should retrieve self[2...4]
      should retrieve self[2...6]
      should retrieve self[2...2]
      should retrieve self[2...2]
      should retrieve self[2...4]
      should retrieve self[2...6]
      should retrieve self[4...2]
      should retrieve self[4...2]
      should retrieve self[4...4]
      should retrieve self[4...6]
      should retrieve self[6...2]
      should retrieve self[6...2]
      should retrieve self[6...4]
      should retrieve self[6...6]
      should retrieve self[2..-6]
      should retrieve self[2..-2]
      should retrieve self[2..-6]
      should retrieve self[2..-2]
      should retrieve self[4..-6]
      should retrieve self[4..-2]
      should retrieve self[6..-6]
      should retrieve self[6..-2]
      should retrieve self[2...-6]
      should retrieve self[2...-2]
      should retrieve self[2...-6]
      should retrieve self[2...-2]
      should retrieve self[4...-6]
      should retrieve self[4...-2]
      should retrieve self[6...-6]
      should retrieve self[6...-2]
      should retrieve self[-6..2]
      should retrieve self[-6..2]
      should retrieve self[-6..4]
      should retrieve self[-6..6]
      should retrieve self[-2..2]
      should retrieve self[-2..2]
      should retrieve self[-2..4]
      should retrieve self[-2..6]
      should retrieve self[-6...2]
      should retrieve self[-6...2]
      should retrieve self[-6...4]
      should retrieve self[-6...6]
      should retrieve self[-2...2]
      should retrieve self[-2...2]
      should retrieve self[-2...4]
      should retrieve self[-2...6]
      should retrieve self[-6..-6]
      should retrieve self[-6..-2]
      should retrieve self[-2..-6]
      should retrieve self[-2..-2]
      should retrieve self[-6...-6]
      should retrieve self[-6...-2]
      should retrieve self[-2...-6]
      should retrieve self[-2...-2]
      should retrieve self[2,-1]
      should retrieve self[2,2]
      should retrieve self[2,6]
      should retrieve self[2,-1]
      should retrieve self[2,2]
      should retrieve self[2,6]
      should retrieve self[4,-1]
      should retrieve self[4,2]
      should retrieve self[4,6]
      should retrieve self[6,-1]
      should retrieve self[6,2]
      should retrieve self[6,6]
      should retrieve self[-6,-1]
      should retrieve self[-6,2]
      should retrieve self[-6,6]
      should retrieve self[-2,-1]
      should retrieve self[-2,2]
      should retrieve self[-2,6]
    packed_character[0]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    packed_character[1]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    packed_character[2]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    packed_character[3]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    packed_character[4]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    .packed_characters
      should be an Array
      should contain the expected number of elements
      should contain instances of the proper slice class (PackedCharacter)
  bit
    should allow access to all the slices by .bits
    behaves like slicr is indexed
      should allow indexing
      should return nil for self[-(size+1)]
      should return nil for self[size]
      should retrieve self[0]
      should retrieve self[1]
      should retrieve self[2]
      should retrieve self[3]
      should retrieve self[4]
      should retrieve self[5]
      should retrieve self[6]
      should retrieve self[7]
      should retrieve self[8]
      should retrieve self[9]
      should retrieve self[10]
      should retrieve self[11]
      should retrieve self[12]
      should retrieve self[13]
      should retrieve self[14]
      should retrieve self[15]
      should retrieve self[16]
      should retrieve self[17]
      should retrieve self[18]
      should retrieve self[19]
      should retrieve self[20]
      should retrieve self[21]
      should retrieve self[22]
      should retrieve self[23]
      should retrieve self[24]
      should retrieve self[25]
      should retrieve self[26]
      should retrieve self[27]
      should retrieve self[28]
      should retrieve self[29]
      should retrieve self[30]
      should retrieve self[31]
      should retrieve self[32]
      should retrieve self[33]
      should retrieve self[34]
      should retrieve self[35]
      should retrieve self[-36]
      should retrieve self[-35]
      should retrieve self[-34]
      should retrieve self[-33]
      should retrieve self[-32]
      should retrieve self[-31]
      should retrieve self[-30]
      should retrieve self[-29]
      should retrieve self[-28]
      should retrieve self[-27]
      should retrieve self[-26]
      should retrieve self[-25]
      should retrieve self[-24]
      should retrieve self[-23]
      should retrieve self[-22]
      should retrieve self[-21]
      should retrieve self[-20]
      should retrieve self[-19]
      should retrieve self[-18]
      should retrieve self[-17]
      should retrieve self[-16]
      should retrieve self[-15]
      should retrieve self[-14]
      should retrieve self[-13]
      should retrieve self[-12]
      should retrieve self[-11]
      should retrieve self[-10]
      should retrieve self[-9]
      should retrieve self[-8]
      should retrieve self[-7]
      should retrieve self[-6]
      should retrieve self[-5]
      should retrieve self[-4]
      should retrieve self[-3]
      should retrieve self[-2]
      should retrieve self[-1]
      should retrieve self[2..2]
      should retrieve self[2..18]
      should retrieve self[2..35]
      should retrieve self[2..37]
      should retrieve self[18..2]
      should retrieve self[18..18]
      should retrieve self[18..35]
      should retrieve self[18..37]
      should retrieve self[35..2]
      should retrieve self[35..18]
      should retrieve self[35..35]
      should retrieve self[35..37]
      should retrieve self[37..2]
      should retrieve self[37..18]
      should retrieve self[37..35]
      should retrieve self[37..37]
      should retrieve self[2...2]
      should retrieve self[2...18]
      should retrieve self[2...35]
      should retrieve self[2...37]
      should retrieve self[18...2]
      should retrieve self[18...18]
      should retrieve self[18...35]
      should retrieve self[18...37]
      should retrieve self[35...2]
      should retrieve self[35...18]
      should retrieve self[35...35]
      should retrieve self[35...37]
      should retrieve self[37...2]
      should retrieve self[37...18]
      should retrieve self[37...35]
      should retrieve self[37...37]
      should retrieve self[2..-37]
      should retrieve self[2..-18]
      should retrieve self[18..-37]
      should retrieve self[18..-18]
      should retrieve self[35..-37]
      should retrieve self[35..-18]
      should retrieve self[37..-37]
      should retrieve self[37..-18]
      should retrieve self[2...-37]
      should retrieve self[2...-18]
      should retrieve self[18...-37]
      should retrieve self[18...-18]
      should retrieve self[35...-37]
      should retrieve self[35...-18]
      should retrieve self[37...-37]
      should retrieve self[37...-18]
      should retrieve self[-37..2]
      should retrieve self[-37..18]
      should retrieve self[-37..35]
      should retrieve self[-37..37]
      should retrieve self[-18..2]
      should retrieve self[-18..18]
      should retrieve self[-18..35]
      should retrieve self[-18..37]
      should retrieve self[-37...2]
      should retrieve self[-37...18]
      should retrieve self[-37...35]
      should retrieve self[-37...37]
      should retrieve self[-18...2]
      should retrieve self[-18...18]
      should retrieve self[-18...35]
      should retrieve self[-18...37]
      should retrieve self[-37..-37]
      should retrieve self[-37..-18]
      should retrieve self[-18..-37]
      should retrieve self[-18..-18]
      should retrieve self[-37...-37]
      should retrieve self[-37...-18]
      should retrieve self[-18...-37]
      should retrieve self[-18...-18]
      should retrieve self[2,-1]
      should retrieve self[2,18]
      should retrieve self[2,37]
      should retrieve self[18,-1]
      should retrieve self[18,18]
      should retrieve self[18,37]
      should retrieve self[35,-1]
      should retrieve self[35,18]
      should retrieve self[35,37]
      should retrieve self[37,-1]
      should retrieve self[37,18]
      should retrieve self[37,37]
      should retrieve self[-37,-1]
      should retrieve self[-37,18]
      should retrieve self[-37,37]
      should retrieve self[-18,-1]
      should retrieve self[-18,18]
      should retrieve self[-18,37]
    bit[0]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[1]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[2]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[3]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[4]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[5]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[6]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[7]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[8]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[9]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[10]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[11]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[12]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[13]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[14]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[15]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[16]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[17]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[18]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[19]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[20]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[21]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[22]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[23]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[24]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[25]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[26]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[27]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[28]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[29]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[30]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[31]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[32]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[33]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[34]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    bit[35]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    .bits
      should be an Array
      should contain the expected number of elements
      should contain instances of the proper slice class (Bit)
  integer
    should allow access to all the slices by .integers
    behaves like slicr is indexed
      should allow indexing
      should return nil for self[-(size+1)]
      should return nil for self[size]
      should retrieve self[0]
      should retrieve self[-1]
      should retrieve self[0..0]
      should retrieve self[0..2]
      should retrieve self[0..0]
      should retrieve self[0..0]
      should retrieve self[0..2]
      should retrieve self[2..0]
      should retrieve self[2..2]
      should retrieve self[2..0]
      should retrieve self[2..0]
      should retrieve self[2..2]
      should retrieve self[0..0]
      should retrieve self[0..2]
      should retrieve self[0..0]
      should retrieve self[0..0]
      should retrieve self[0..2]
      should retrieve self[0..0]
      should retrieve self[0..2]
      should retrieve self[0..0]
      should retrieve self[0..0]
      should retrieve self[0..2]
      should retrieve self[2..0]
      should retrieve self[2..2]
      should retrieve self[2..0]
      should retrieve self[2..0]
      should retrieve self[2..2]
      should retrieve self[0...0]
      should retrieve self[0...2]
      should retrieve self[0...0]
      should retrieve self[0...0]
      should retrieve self[0...2]
      should retrieve self[2...0]
      should retrieve self[2...2]
      should retrieve self[2...0]
      should retrieve self[2...0]
      should retrieve self[2...2]
      should retrieve self[0...0]
      should retrieve self[0...2]
      should retrieve self[0...0]
      should retrieve self[0...0]
      should retrieve self[0...2]
      should retrieve self[0...0]
      should retrieve self[0...2]
      should retrieve self[0...0]
      should retrieve self[0...0]
      should retrieve self[0...2]
      should retrieve self[2...0]
      should retrieve self[2...2]
      should retrieve self[2...0]
      should retrieve self[2...0]
      should retrieve self[2...2]
      should retrieve self[0..-2]
      should retrieve self[2..-2]
      should retrieve self[0..-2]
      should retrieve self[0..-2]
      should retrieve self[2..-2]
      should retrieve self[0...-2]
      should retrieve self[2...-2]
      should retrieve self[0...-2]
      should retrieve self[0...-2]
      should retrieve self[2...-2]
      should retrieve self[-2..0]
      should retrieve self[-2..2]
      should retrieve self[-2..0]
      should retrieve self[-2..0]
      should retrieve self[-2..2]
      should retrieve self[-2...0]
      should retrieve self[-2...2]
      should retrieve self[-2...0]
      should retrieve self[-2...0]
      should retrieve self[-2...2]
      should retrieve self[-2..-2]
      should retrieve self[-2...-2]
      should retrieve self[0,-1]
      should retrieve self[0,0]
      should retrieve self[0,2]
      should retrieve self[2,-1]
      should retrieve self[2,0]
      should retrieve self[2,2]
      should retrieve self[0,-1]
      should retrieve self[0,0]
      should retrieve self[0,2]
      should retrieve self[0,-1]
      should retrieve self[0,0]
      should retrieve self[0,2]
      should retrieve self[2,-1]
      should retrieve self[2,0]
      should retrieve self[2,2]
      should retrieve self[-2,-1]
      should retrieve self[-2,0]
      should retrieve self[-2,2]
    integer[0]
      should define the .format method
      the .format method should use the default format
      should define the .value method
    .integers
      should be an Array
      should contain the expected number of elements
      should contain instances of the proper slice class (Integer)
  slices
    .<slices_name> should create a merged string using .string
    .<slices_name> should create a merged string using .string
    with significant_bits < width
      should mask out non-significant bits
    slices with width > underlying data width
      should have 0 count
    string slice character
      should define all string formats
      should return true for .string?
      [0]
        should create a .string
         .to_s should == .string
        should define the .asc method
        should define the .plus method
        should have .asc >= 0
        should allow .asc.format
        should return a string as .value
        should have .string == .asc.chr
        should define the + operator as concatenation
        should allow prefix +
        should allow postfix +
        should not define .sign?
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format(:default) should == .string_inspect
           .format should == .format(:default)
        format string
          should display .format(string)
           .string should == .format(string)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        format string_inspect
          should display .format(string_inspect)
           .string_inspect should == .format(string_inspect)
      [1]
        should create a .string
         .to_s should == .string
        should define the .asc method
        should define the .plus method
        should have .asc >= 0
        should allow .asc.format
        should return a string as .value
        should have .string == .asc.chr
        should define the + operator as concatenation
        should allow prefix +
        should allow postfix +
        should not define .sign?
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format(:default) should == .string_inspect
           .format should == .format(:default)
        format string
          should display .format(string)
           .string should == .format(string)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        format string_inspect
          should display .format(string_inspect)
           .string_inspect should == .format(string_inspect)
      [2]
        should create a .string
         .to_s should == .string
        should define the .asc method
        should define the .plus method
        should have .asc >= 0
        should allow .asc.format
        should return a string as .value
        should have .string == .asc.chr
        should define the + operator as concatenation
        should allow prefix +
        should allow postfix +
        should not define .sign?
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format(:default) should == .string_inspect
           .format should == .format(:default)
        format string
          should display .format(string)
           .string should == .format(string)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        format string_inspect
          should display .format(string_inspect)
           .string_inspect should == .format(string_inspect)
      [3]
        should create a .string
         .to_s should == .string
        should define the .asc method
        should define the .plus method
        should have .asc >= 0
        should allow .asc.format
        should return a string as .value
        should have .string == .asc.chr
        should define the + operator as concatenation
        should allow prefix +
        should allow postfix +
        should not define .sign?
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format(:default) should == .string_inspect
           .format should == .format(:default)
        format string
          should display .format(string)
           .string should == .format(string)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        format string_inspect
          should display .format(string_inspect)
           .string_inspect should == .format(string_inspect)
    string slice packed_character
      should define all string formats
      should return true for .string?
      [0]
        should create a .string
         .to_s should == .string
        should define the .asc method
        should define the .plus method
        should have .asc >= 0
        should allow .asc.format
        should return a string as .value
        should have .string == .asc.chr
        should define the + operator as concatenation
        should allow prefix +
        should allow postfix +
        should not define .sign?
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format(:default) should == .string_inspect
           .format should == .format(:default)
        format string
          should display .format(string)
           .string should == .format(string)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        format string_inspect
          should display .format(string_inspect)
           .string_inspect should == .format(string_inspect)
      [1]
        should create a .string
         .to_s should == .string
        should define the .asc method
        should define the .plus method
        should have .asc >= 0
        should allow .asc.format
        should return a string as .value
        should have .string == .asc.chr
        should define the + operator as concatenation
        should allow prefix +
        should allow postfix +
        should not define .sign?
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format(:default) should == .string_inspect
           .format should == .format(:default)
        format string
          should display .format(string)
           .string should == .format(string)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        format string_inspect
          should display .format(string_inspect)
           .string_inspect should == .format(string_inspect)
      [2]
        should create a .string
         .to_s should == .string
        should define the .asc method
        should define the .plus method
        should have .asc >= 0
        should allow .asc.format
        should return a string as .value
        should have .string == .asc.chr
        should define the + operator as concatenation
        should allow prefix +
        should allow postfix +
        should not define .sign?
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format(:default) should == .string_inspect
           .format should == .format(:default)
        format string
          should display .format(string)
           .string should == .format(string)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        format string_inspect
          should display .format(string_inspect)
           .string_inspect should == .format(string_inspect)
      [3]
        should create a .string
         .to_s should == .string
        should define the .asc method
        should define the .plus method
        should have .asc >= 0
        should allow .asc.format
        should return a string as .value
        should have .string == .asc.chr
        should define the + operator as concatenation
        should allow prefix +
        should allow postfix +
        should not define .sign?
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format(:default) should == .string_inspect
           .format should == .format(:default)
        format string
          should display .format(string)
           .string should == .format(string)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        format string_inspect
          should display .format(string_inspect)
           .string_inspect should == .format(string_inspect)
      [4]
        should create a .string
         .to_s should == .string
        should define the .asc method
        should define the .plus method
        should have .asc >= 0
        should allow .asc.format
        should return a string as .value
        should have .string == .asc.chr
        should define the + operator as concatenation
        should allow prefix +
        should allow postfix +
        should not define .sign?
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format(:default) should == .string_inspect
           .format should == .format(:default)
        format string
          should display .format(string)
           .string should == .format(string)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        format string_inspect
          should display .format(string_inspect)
           .string_inspect should == .format(string_inspect)
    non-string slice half_word
      should return false for .string?
      should define all relevant formats
      should define .sign?
      [0]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .half_words.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [1]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .half_words.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
    non-string slice byte
      should return false for .string?
      should define all relevant formats
      should define .sign?
      [0]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bytes.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [1]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bytes.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [2]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bytes.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [3]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bytes.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
    non-string slice bit
      should return false for .string?
      should define all relevant formats
      should define .sign?
      [0]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [1]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [2]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [3]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [4]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [5]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [6]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [7]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [8]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [9]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [10]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [11]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [12]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [13]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [14]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [15]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [16]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [17]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [18]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [19]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [20]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [21]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [22]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [23]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [24]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [25]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [26]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [27]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [28]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [29]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [30]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [31]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [32]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [33]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [34]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
      [35]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .bits.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        without signs
          the default format should be octal
          should not define .signed
          should not define .unsigned
    non-string slice integer
      should return false for .string?
      should define all relevant formats
      should define .sign?
      [0]
        should not define the .asc method
        should not define the string format
        should not define the string_inspect format
         .to_s should == default format
        should not define the .plus method
        should return a number as .value
        should return the proper value
        should define the + operator as addition
        should allow prefix arithmetic
        should allow postfix arithmetic
        should not create a merged string using .integers.string
        format inspect
          should display .format(inspect)
           .inspect should == .format(inspect)
        format default
          should display .format(default)
           .format should == .format(:default)
        format hex
          should display .format(hex)
           .hex should == .format(hex)
        format decimal
          should display .format(decimal)
           .decimal should == .format(decimal)
        format binary
          should display .format(binary)
           .binary should == .format(binary)
        format octal
          should display .format(octal)
           .octal should == .format(octal)
        with signs
          the default format should be decimal
          should define the .signed method
          should have value == signed
          should define the .unsigned method
          should allow .signed.format
          should allow .unsigned.format
          should allow .unsigned.octal
          should have .unsigned >= 0
  with positive values
    should have .signed == .unsigned
  with negative values
    should have .signed < 0
    should handle negative math okay
    in two's complement format
      should have .signed set properly
      should have .unsigned set properly
      should handle -(-1) properly
    in one's complement format
      should have .signed set properly
      should have .unsigned set properly
  any slice
    should default to .value
  any field
    should collapse
    should default to .value

Slicr::WordsBase
  should set size
  should allow assignment
*** slices.size = 12
  should allow accessors
*** slices.size = 4
  should allow indexed accessors
  behaves like slicr is indexed
    should allow indexing
    should return nil for self[-(size+1)]
    should return nil for self[size]
    should retrieve self[0]
    should retrieve self[1]
    should retrieve self[2]
    should retrieve self[-3]
    should retrieve self[-2]
    should retrieve self[-1]
    should retrieve self[2..2]
    should retrieve self[2..1]
    should retrieve self[2..2]
    should retrieve self[2..4]
    should retrieve self[1..2]
    should retrieve self[1..1]
    should retrieve self[1..2]
    should retrieve self[1..4]
    should retrieve self[2..2]
    should retrieve self[2..1]
    should retrieve self[2..2]
    should retrieve self[2..4]
    should retrieve self[4..2]
    should retrieve self[4..1]
    should retrieve self[4..2]
    should retrieve self[4..4]
    should retrieve self[2...2]
    should retrieve self[2...1]
    should retrieve self[2...2]
    should retrieve self[2...4]
    should retrieve self[1...2]
    should retrieve self[1...1]
    should retrieve self[1...2]
    should retrieve self[1...4]
    should retrieve self[2...2]
    should retrieve self[2...1]
    should retrieve self[2...2]
    should retrieve self[2...4]
    should retrieve self[4...2]
    should retrieve self[4...1]
    should retrieve self[4...2]
    should retrieve self[4...4]
    should retrieve self[2..-4]
    should retrieve self[2..-1]
    should retrieve self[1..-4]
    should retrieve self[1..-1]
    should retrieve self[2..-4]
    should retrieve self[2..-1]
    should retrieve self[4..-4]
    should retrieve self[4..-1]
    should retrieve self[2...-4]
    should retrieve self[2...-1]
    should retrieve self[1...-4]
    should retrieve self[1...-1]
    should retrieve self[2...-4]
    should retrieve self[2...-1]
    should retrieve self[4...-4]
    should retrieve self[4...-1]
    should retrieve self[-4..2]
    should retrieve self[-4..1]
    should retrieve self[-4..2]
    should retrieve self[-4..4]
    should retrieve self[-1..2]
    should retrieve self[-1..1]
    should retrieve self[-1..2]
    should retrieve self[-1..4]
    should retrieve self[-4...2]
    should retrieve self[-4...1]
    should retrieve self[-4...2]
    should retrieve self[-4...4]
    should retrieve self[-1...2]
    should retrieve self[-1...1]
    should retrieve self[-1...2]
    should retrieve self[-1...4]
    should retrieve self[-4..-4]
    should retrieve self[-4..-1]
    should retrieve self[-1..-4]
    should retrieve self[-1..-1]
    should retrieve self[-4...-4]
    should retrieve self[-4...-1]
    should retrieve self[-1...-4]
    should retrieve self[-1...-1]
    should retrieve self[2,-1]
    should retrieve self[2,1]
    should retrieve self[2,4]
    should retrieve self[1,-1]
    should retrieve self[1,1]
    should retrieve self[1,4]
    should retrieve self[2,-1]
    should retrieve self[2,1]
    should retrieve self[2,4]
    should retrieve self[4,-1]
    should retrieve self[4,1]
    should retrieve self[4,4]
    should retrieve self[-4,-1]
    should retrieve self[-4,1]
    should retrieve self[-4,4]
    should retrieve self[-1,-1]
    should retrieve self[-1,1]
    should retrieve self[-1,4]

Finished in 1.8 seconds
3089 examples, 0 failures
